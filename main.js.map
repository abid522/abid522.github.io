{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,oBAAoB,wBAAwB,KAAK,eAAe,mBAAmB,KAAK,cAAc,yBAAyB,2BAA2B,+BAA+B,0BAA0B,qBAAqB,KAAK,C;;;;;;;;;;;ACA7O,+4EAA+4E,cAAc,+BAA+B,YAAY,2BAA2B,aAAa,yB;;;;;;;;;;;;;;;;;;;;;;;;;ACA37E;AACb;AAOxC;IALA;QAOG,SAAI,GAAC;YACH,KAAK,EAAE,EAAE;YACT,GAAG,EAAE,EAAE;YACP,IAAI,EAAE,EAAE;SACT;QACD,gBAAW,GAAG,KAAK;IAStB,CAAC;IAPE,+BAAQ,GAAR;QACG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAdc;QAAf,+DAAS,CAAC,GAAG,CAAC;kCAAS,qDAAM;gDAAC;IADpB,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAgBxB;IAAD,mBAAC;CAAA;AAhBwB;;;;;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AACI;AACF;AAEI;AAc/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAZrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,wDAAU;aACX;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACnBtB;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"*{\\r\\n    margin-top: 5px;\\r\\n}\\r\\n\\r\\n.error{\\r\\n    color: red;\\r\\n}\\r\\n\\r\\n.data{\\r\\n    margin-top: 12px;\\r\\n    margin-left: 196px;\\r\\n    border: 2px solid blue;\\r\\n    padding: 6px 37px;\\r\\n    width: 380px;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-xs-12 col-sm-10 col-md-8 col-sm-offset-1 col-md-offset-2\\\">\\n      <!-- Add a Form with the following Inputs (and Validators)\\n           1) Mail address (should not be empty and should be an email address)\\n           2) A Dropdown which allows the user to select from three different Subscriptions (\\\"Basic\\\", \\\"Advanced\\\", \\\"Pro\\\")\\n              Set \\\"Advanced\\\" as Default\\n           3) A Password field (should not be empty)\\n           4) A Submit Button\\n\\n           Display a warning message if the Form is invalid AND was touched. Display a warning message below each input if it's invalid.\\n\\n           Upon submitting the form, you should simply print the Value of the Form to the Console.\\n           Optionally, display it in your template.\\n      -->\\n      <form (ngSubmit)=\\\"onSubmit()\\\" #f=\\\"ngForm\\\">\\n        <div>\\n            <label for=\\\"email\\\">Email:</label><br>\\n            <input type=\\\"email\\\"\\n            name=\\\"email\\\" \\n            required \\n            class=\\\"form-control\\\"\\n            ngModel\\n            email\\n            #email=\\\"ngModel\\\">\\n            <p class=\\\"error\\\" *ngIf=\\\"!email.valid && email.touched\\\">Email is invalid!</p>\\n        </div>\\n        <div>\\n          <label for=\\\"subscription\\\">Subscription:</label>\\n            <select name=\\\"subscription\\\"\\n            class=\\\"form-control\\\"\\n            [ngModel]=\\\"'advanced'\\\"\\n            >\\n                <option value=\\\"basic\\\">Basic</option>\\n                <option value=\\\"advanced\\\">Advanced</option>\\n                <option value=\\\"pro\\\">Pro</option>\\n            </select>\\n        </div>\\n        <div>\\n            <label for=\\\"password\\\">Password:</label>\\n            <input type=\\\"password\\\"\\n            class=\\\"form-control\\\"\\n            name=\\\"password\\\"\\n            required\\n            ngModel\\n            #pass=\\\"ngModel\\\">\\n            <p  class=\\\"error\\\" *ngIf=\\\"!pass.valid && pass.touched\\\">Password field should not be empty!</p>\\n        </div>\\n        <br>\\n        <br>\\n        <p class=\\\"error\\\" *ngIf=\\\"!f.valid && f.touched\\\">Form is invalid!</p>\\n        \\n        <button type=\\\"submit\\\" class=\\\"btn btn-info\\\">Submit</button>\\n      </form>\\n    </div>\\n  </div>\\n  <div class=\\\"data\\\" *ngIf=\\\"isSubmitted\\\">\\n     <h3 style=\\\"text-align: center\\\"><b>Your info :</b></h3>\\n     <hr>\\n     <p>Email - {{ user.email }}</p>\\n     <p>Subscription - {{ user.sub }}</p>\\n     <p>Password - {{ user.pass }}</p>\\n  </div>\\n</div>\\n\"","import { Component, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  @ViewChild('f') myForm: NgForm;\n   user={\n     email: '',\n     sub: '',\n     pass: ''\n   }\n   isSubmitted = false\n\n   onSubmit(){\n      this.isSubmitted = true;\n      this.user.email = this.myForm.value.email;\n      this.user.sub = this.myForm.value.subscription;\n      this.user.pass = this.myForm.value.password;\n      this.myForm.reset();\n   }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}